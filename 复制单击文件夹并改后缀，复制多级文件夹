import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;



public class haha {
	public static void main(String[] args) throws IOException{	
		
		/*BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(
				new FileOutputStream("Ashin.txt"),"GBK"));  //用GBK编码
		bw.write("王瑜");
		bw.newLine();
		bw.write("刘焕濠");
		bw.newLine();
		bw.write("阿信");
		bw.newLine();
		bw.write("周杰伦");
		bw.close();
		BufferedReader br=new BufferedReader(new FileReader("Ashin.txt"));
		//用UTF-8解码
		ArrayList<String> array=new ArrayList<String>();
		String line=null;
		//read返回的是int类型，readLine()返回的是String类型
		while((line=br.readLine())!=null)
		{
			array.add(line);
		}
		br.close();
		Random r=new Random();//创建的随机对象
		int index=r.nextInt(array.size());  //最大索引 为size()-1
		String name=array.get(index);
		System.out.println("该幸运者是:"+name);*/
		//********************************
		//复制单级文件夹
		/* A:封装目录
		 * B:获取该目录下所有文件的File数组
		 * C:遍历该File数组，得到每一个File对象
		 * D:把该File进行复制
		 */
		/*File srcFolder=new File("e:\\demo");
		//封装目的地
		File destFolder=new File("e:\\test");
		//如果目的文件夹不存在就创建
		if(!destFolder.exists())     //判断文件是否存在
		{
			destFolder.mkdir();
		}
		//获取该目录下所有Files数组
		File[] fileArray=srcFolder.listFiles();
		//遍历该File数组，得到每一个File对象
		for(File file:fileArray)    //默认得到的全部是文件
		{ 
			//System.out.println(file);
			String name=file.getName();
			File newFile=new File(destFolder,name);   //组成新的文件名，生成和原文件一样的名字
			copyFile(file,newFile);//创建一个复制文件的方法
		}*/
		//*********************************
		//复制指定目录下指定后缀名的文件并修改名称案例
		/* A:封装目录
		 * B:获取该目录下所有的文件的File数组
		 * C:遍历该File数组，得到每一个File对象
		 * D:把File进行复制
		 * E:把目的地目录下改名
		 */
		/*File srcFolder=new File("e:\\demo");
		//封装目的地
		File destFolder=new File("e:\\test");
		//如果目录不存在就创建
		if(!destFolder.exists())
		{
			destFolder.mkdir();
		}
		//获取该目录下的Java文件的File数组
		File[] fileArray=srcFolder.listFiles(new FilenameFilter()  //对集合元素进行过滤
		{
			@Override
			public boolean accept(File dir,String name)
			{
				return new File(dir,name).isFile()&&name.endsWith(".txt");
				//是文件并且以.java结尾
			}
		});
		//遍历该File数组，得到每一个File对象
		for(File file:fileArray)
		{
			String name=file.getName();
			File newFile=new File(destFolder,name);
			copyFile(file,newFile);
		}
		
		File[] destFileArray=destFolder.listFiles();
		for(File file:destFileArray)
		{
			//System.out.println(file);
			String name=file.getName();
			String newName=name.replace(".txt", ".jad");
			File newFile=new File(destFolder,newName);   //把更改的名称拼接成一个新的文件
			file.renameTo(newFile);       //将文件进行重命名
		}*/
		//***************************
		//复制多级文件夹案例
		/* A:封装数据源File
		 * B:封装目的地File
		 * C:判断该File是文件夹还是文件
		 * 		a:是文件夹
		 * 			在目的地下创建该文件夹
		 * 			获取该File对象下所有文件或者文件夹File对象
		 * 			遍历得到每一个File对象，回到C
		 * 		b:是文件就复制(字节流)
		 */
		//封装数据源File
		File srcFile=new File("E:\\demo");
		//封装目的地File
		File destFile=new File("e:\\test");    //在test文件夹下创建demo文件夹
		//复制文件夹的功能（递归）
		copyFolder(srcFile,destFile);
	} 
	private static void copyFolder(File srcFile,File destFile) throws IOException
	{
		//如果是文件夹
		if(srcFile.isDirectory())
		{
			File newFolder=new File(destFile,srcFile.getName());
			newFolder.mkdir();
			//获取该File对象下所有文件或者文件夹File对象
			File[] fileArray=srcFile.listFiles();
			for(File file:fileArray)
			{
				copyFolder(file,newFolder);//运用了递归的思想
			}
		}
		else//文件
		{
			File newFile=new File(destFile,srcFile.getName());
			copyFile(srcFile,newFile);
		}
	}
	public static void copyFile(File file,File newFile) throws IOException
	{
			BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));    //以字节形式读取
			BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(newFile));
			int len=0;
			while((len=bis.read())!=-1)
			{
				bos.write(len);
			}
			bis.close();    //需要刷新，否则可能进不去
			bos.close();
	}
	}


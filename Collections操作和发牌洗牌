import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.TreeSet;

public class haha {
	public static void main(String[] args) {
			
		/* Collections是针对集合进行操作的工具类，都是静态方法
		 * Collection和Collections的区别
		 * Collection是单列集合的顶层接口，有子接口List和Set
		 * Collections是针对集合操作的工具类，有对集合进行排序和二分查找的方法
		 */
		/*List<Integer> list=new ArrayList<Integer>();
		list.add(30);
		list.add(20);
		list.add(23);
		//public static <T> void sort(List<T> list)  默认情况下自然排序
		Collections.sort(list);
		//public static <T> int binarySearch(List<?> list,T key)
		//System.out.println(Collections.binarySearch(list, 23));
		//public static <T> T max(Collection<?> coll) 
		//System.out.println(Collections.max(list));
		//public static void reverse(List<?> list)
		//Collections.reverse(list);
		//public static void shuffle(List<?> list)
		Collections.shuffle(list);
		System.out.println(list);*/
		//*******************************************
		/*List<Student> list=new ArrayList<Student>();
		Student s1=new Student(12,"刘焕濠");
		Student s2=new Student(23,"王瑜");
		list.add(s1);
		list.add(s2);
		//自定义对象进行排序必须自己创建比较器
		Collections.sort(list,new Comparator<Student>()
				{
					@Override
					public int compare(Student s1,Student s2)
					{
						int num=s1.getAge()-s2.getAge();
						int num2=num==0?s1.getName().compareTo(s2.getName()):num;
						return num2;
					}
				});
		Collections.sort(list);
		for(Student s:list)
		{
			System.out.println(s.getName()+"---"+s.getAge());
		}
		*/
		//***************************************
		//模拟斗地主洗牌和发牌
		//创建一个牌盒
		/*ArrayList<String> array=new ArrayList<String>();
		String[] types={"♠","♥","♣","■"};
		//定义一个点色数组
		String[] numbers={"A","2","3","4","5","6","7","8","9","10","J","Q","K"};
		for(String type:types)
		{
			for(String number:numbers)
			{
				array.add(type.concat(number));
			}
		}
		array.add("小王");
		array.add("大王");
		Collections.shuffle(array);
		//发牌
		ArrayList<String> LHH=new ArrayList<String>();
		ArrayList<String> WY=new ArrayList<String>();
		ArrayList<String> daHai=new ArrayList<String>();
		ArrayList<String> dipai=new ArrayList<String>();
		for(int x=0;x<array.size();x++)
		{
			if(x>=array.size()-3)
			{
				dipai.add(array.get(x));
			}
			else if(x%3==0)
			{
				LHH.add(array.get(x));
			}
			else if(x%3==1)
			{
				WY.add(array.get(x));
			}
			else if(x%3==2)
			{
				daHai.add(array.get(x));
			}
		}
		lookPoker("刘焕濠",LHH);
		lookPoker("王瑜",WY);
		lookPoker("大海",daHai);
		lookPoker("底牌",dipai);
		}
	public static void lookPoker(String name,ArrayList<String> array)
	{
		System.out.print(name+"的牌是:");
		for(String s:array)
		{
			System.out.print(s+"  ");
		}
		System.out.println();
	}*/
	//**************************************************
	//模拟地主洗牌和发牌并对牌进行排序
	/*
	 * A:创建一个HashMap集合
	 * B:创建一个ArrayList集合
	 * C:创建花色数组和点数数组
	 * D:从0开始往HashMap里面存储编号和点数对应花数，并存储对应的牌
	 * 		同时往ArrayList里面存储编号即可
	 * E:洗牌(洗的是编号)
	 * F:发牌(发的也是编号，为了保证是排序的，就创建TreeMap集合接收)
	 * G:看牌(遍历TreeSet集合，到HashMap集合找到对应的牌)
	 */
		//创建HashMap集合
		HashMap<Integer,String> hm=new HashMap<Integer,String>();
		//创建一个ArrayList集合
		ArrayList<Integer> array=new ArrayList<Integer>();
		//创建花色数组和点数数组
		//定义一个花色数组
		String[] colors={"♠","♥","♣","■"};
		String[] numbers={"3","4","5","6","7","8","9","10","J","Q","K","A","2"};
		//在这数组中点数必须从小到大,3-2   !!!!!
		//从0开始往HashMap里面存储编号，并存储对应的牌，同时往ArrrayList里面存储编号即可
		int index=0;
		for(String number:numbers)
		{
			for(String color:colors)
			{
				String poker=color.concat(number);
				hm.put(index, poker);
				array.add(index);
				index++;
			}
		}
		hm.put(index,"小王");
		array.add(index);
		index++;
		hm.put(index, "大王");
		array.add(index);
		//洗牌(洗牌洗的是编号)
		Collections.shuffle(array);
		//发牌发的也是编号，为了保证编号是排序的，就创建TreeSet集合接收
		TreeSet<Integer> LHH=new TreeSet<Integer>();
		TreeSet<Integer> WY=new TreeSet<Integer>();
		TreeSet<Integer> Ashin=new TreeSet<Integer>();
		TreeSet<Integer> dipai=new TreeSet<Integer>();
		for(int x=0;x<array.size();x++)
		{
			if(x>=array.size()-3)
			{
				dipai.add(array.get(x));
			}
			else if(x%3==0)
			{
				LHH.add(array.get(x));
			}
			else if(x%3==1)
			{
				WY.add(array.get(x));
			}
			else if(x%3==2)
			{
				Ashin.add(array.get(x));
			}
		}
		lookPoker("刘焕濠",LHH,hm);
		lookPoker("王瑜",WY,hm);
		lookPoker("阿信",Ashin,hm);
		lookPoker("底牌",dipai,hm);
	}
		//看牌(遍历TreeSet集合,获取编号，到HashMap集合找对应的牌)
		//方法写在public class里面，写在main外面！！！
		public static void lookPoker(String name,TreeSet<Integer> ts,HashMap<Integer,String> hm)
		{
			System.out.print(name+"的牌是:");
			for(Integer key:ts)     //将TreeSet的数据作为HashMap的键进行索引
			{
				String value=hm.get(key);
				System.out.print(value+"  ");
			}
			System.out.println();
		}
}


	



	//实现comparable接口
	class Student implements Comparable<Student>
	{
		private int age;
		private String name;
		public Student() {
			super();
			// TODO Auto-generated constructor stub
		}
		public Student(int age, String name) {
			super();
			this.age = age;
			this.name = name;
		}
		public int getAge() {
			return age;
		}
		public void setAge(int age) {
			this.age = age;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		@Override
		public int compareTo(Student s)
		{
			int num=this.age-s.age;
			int num2=num==0?this.name.compareTo(s.name):num;
			return num2;
		}
	}

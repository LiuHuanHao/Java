import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

/*
 * List集合的特点:
 * 有序(存储和取出的元素一致)，可重复
 * List特有的功能
 * A:添加功能
 * void add(int index,Object element):在指定位置添加元素
 * B:获取功能
 * Object get(int index):  获取指定位置的元素
 * C:列表迭代器
 * ListIterator listIterator():list特有的迭代器       
 * D:删除功能
 * Object remove(int index):根据索引删除元素返回，被删除的元素
 * E:修改功能
 * Object set(int index,Object element) 根据索引修改元素，返回被修改的元素
 */

public class heihei {
	public static void main(String[] args) throws ParseException {

			/*List list=new ArrayList();
			list.add("hello");
			list.add("world");
			list.add("java");*/
			/*list.add(1,"android");
			System.out.println(list.get(1));
			list.remove(1);
			list.set(1,"haha");
			Iterator it=list.iterator();    
			while(it.hasNext())
			{
				String s=(String)it.next();
				System.out.println(s);
			}*/
			//**************************************
			/*for(int x=0;x<3;x++)
			{
				System.out.println(list.get(x));
			}*/
			//当元素过多，数起来比较麻烦时，就应该使用集合的长度功能
			/*for(int x=0;x<list.size();x++)
			{
				String s=(String)list.get(x);
				System.out.print(" "+s);
			}
			Iterator it=list.iterator();  //也可以用这种方法遍历
			while(it.hasNext())
			{
				String s=(String)it.next();
				System.out.print(" "+s);
			}*/
			//*****************************
			/*
			 * 列表迭代器:
			 * ListIterator listIterator():List集合特有的迭代器
			 * 该迭代器继承了Iterator迭代器，就可以直接使用hasNext()和next()方法
			 * 特有功能
			 * Object previouse():获取上一个元素
			 * boolean hasPreviouse():判断是否有元素
			 * 注意:ListIterator可以实现逆向遍历，但必须先正向遍历，才能逆向遍历！！！！
			 */
			List list=new ArrayList();
			list.add("hello");
			list.add("world");
			list.add("java");
			/*ListIterator lit=list.listIterator();
			while(lit.hasNext())
			{
				String s=(String)lit.next();
				System.out.println(s);
			}
			//System.out.println(lit.previous());  //遍历前一个元素
			System.out.println("---------------");
			while(lit.hasPrevious())
			{
				String s=(String)lit.previous();  //Iterator没有此方法
				System.out.println(s);
			}*/
			//********************************
			//判断有没有world这个元素，如果有就添加javaee元素
			/*Iterator it=list.iterator();
			while(it.hasNext())
			{
				String s=(String)it.next();
				if("world".equals(s))
				{
					list.add("javaee");   
//迭代器依赖于集合而存在，而判断成功后，集合中新添加了元素，而迭代器却不知道，所以就报错了
					//解决方案:
					//A:迭代器迭代元素，迭代器修改元素
					//B:集合遍历元素，集合修改元素
				}
			}
			System.out.println(list);*/
			//解决方案如下:Iterator没有添加功能，所以使用ListIterator
			//但是元素不是加在最末，而是加在next到的地方
			/*ListIterator lit=list.listIterator();
			while(lit.hasNext())
			{
				String s=(String)lit.next();
				if("world".equals(s))
				{
					lit.add("javaee");
				}
			}
			System.out.println(list);*/
			//******************************
			//方式2:   元素添加最后
			for(int x=0;x<list.size();x++)
			{
				String s=(String)list.get(x);
				if("world".equals(s))
				{
					list.add("javaee");
				}
			}
			System.out.println(list); 
	}	
}


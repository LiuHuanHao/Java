import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;

/*
 * 数组和集合的区别:
 * A:长度的区别
 * 数组的长度是固定的
 * 集合长度可变
 * B:内容不同
 * 数组存储的是同一种类型的元素
 * 集合可以存储不同类型的元素
 * C:元素的数据类型
 * 数组可以存储基本数据类型，也可以存储引用数据类型
 * 集合只能存储引用类型
 * 
 * Collection是集合的顶层接口，它的体系有重复的，有有序的，有无序的
 * 
 * Collection的功能概述
 * 1.添加功能
 * boolean add(Object obj)  :添加一个元素
 * boolean addAll(Collection c):  添加一个集合的元素
 * 2.删除功能
 * void clear():移除所有的元素
 * boolean remove(Object obj):移除一个元素
 * boolean removeAll(Collection c):移除一个集合的元素
 * 3.判断功能
 * boolean contains(Object obj):判断集合中是否包含指定元素
 * boolean containsAll(Collection c):判断集合中是否包含指定的集合元素(一个还是所有)
 * boolean isEmpty():判断是否为空
 * 4.获取功能
 * Iterator<E> iterator(重点)
 * 5.长度功能
 * int size():元素的个数
 * 6.交集功能
 * boolean retainAll(Collection c):元素到哪了，返回的boolean又是什么意思
 * 7.把集合转换为数组
 * Object[] toArray()
 */

public class heihei {
	public static void main(String[] args) throws ParseException {	
			//创建集合对象
			//Collection c=new Collection();   //错误，接口不能实例化
			/*Collection c=new ArrayList();
			//System.out.println(c.add("hello"));
			c.add("hello");
			c.add("world");
			c.add("java");
			//c.clear();//清除后所有元素为空
			//System.out.println(c.remove("hello"));  //删除成功，返回true
			//System.out.println(c.remove("javaee"));  //删除失败，返回false
			//System.out.println(c.contains("hello"));   //包含hello，返回true
			//System.out.println(c.isEmpty());
			System.out.println("size:"+c.size());
			System.out.println(c);*/
			//**************************************
			/*Collection c1=new ArrayList();
			c1.add("abc1");
			c1.add("abc2");
			Collection c2=new ArrayList();
			c2.add("abc1");
			c2.add("abc2");   //此集合允许重复
			c2.add("abc3");
			c2.add("abc4");
			//System.out.println(c1.addAll(c2));
			//removeAll中只要有一个或多个c2的元素都会在c1中被删除,并且返回true
			//System.out.println(c1.removeAll(c2));
			//System.out.println(c1.containsAll(c2));
			//containsAll只有当一个集合包含另一个集合的所有元素时才返回true
			System.out.println(c1.retainAll(c2));
			//将交集元素赋值给C1，并且返回c1是否改变的boolean值
			//当c1没有改变时返回false
			System.out.println("c1:"+c1);
			System.out.println("c2:"+c2);*/
			//***********************************
			/*Collection c=new ArrayList();
			c.add("hello");  //Object obj="hello"; //多态，字符串转换为Object类型
			c.add("world");
			c.add("java");
			Object[] objs=c.toArray();  //把集合转换为数组，可以实现集合的遍历
			for(int x=0;x<objs.length;x++)
			{
				//System.out.println(objs[x]+"---------"+objs[x].length());
				//在这里不能用objs[x].length()，因为objs是Object类型，没有length()功能
				//我们要使用字符串的方法就必须将元素还原为字符串
				//向下转型    
				String s=(String) objs[x];
				System.out.println(s+"----------"+s.length());
			}*/
			//****************************************************
			/*
			 * 用集合存储5个学生对象，并把学生对象进行遍历
			 * 分析:
			 * A:创建学生类
			 * B:创建集合对象
			 * C:创建学生对象
			 * D:把学生添加到集合
			 * E:把集合转成数组
			 * F:遍历数组
			 */
			Collection c=new ArrayList();
			Student s1=new Student(22,"刘焕濠");  //注意传递参数的先后顺序
			Student s2=new Student(19,"王瑜");
			Student s3=new Student(-5,"our son");
			c.add(s1);
			c.add(s2);
			c.add(s3);
			Object[] objs=c.toArray();
			for(int x=0;x<objs.length;x++)
			{
				//System.out.println(objs[x]);  //没有重写toString方法
				Student s=(Student)objs[x];   //向下转型
				System.out.println(s.getName()+"  ---------  "+s.getNum());
			}
		}
	}

	class Student
	{
		public Student(int num, String name) {
			super();
			this.num = num;
			this.name = name;
		}
		private int num;
		private String name;
		public Student() {
			super();
			// TODO Auto-generated constructor stub
		}
		public int getNum() {
			return num;
		}
		public void setNum(int num) {
			this.num = num;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		
	}


package aa;



//面试题:要求分别输出30,20,10
/*
*内部类和外部类没有继承关系
*可以通过外部类名限定this对象  Outer.this
*/
/*class Outer
{
	public int num=10;
	class Inner
	{
		public int num=20;
		public void show()
		{
			int num=30;
			System.out.println(num);
			System.out.println(this.num);
			//内部类与外部类没有继承关系，故不可以用
			//super.num,也不可用Outer.num
			System.out.println(new Outer().num);
			System.out.println(Outer.this.num);
			//也可以通过限定this对象为Outer
		}
	}
}
class InnerClassTest
{
	public static void main(String[] args) {
		Outer.Inner oi=new Outer().new Inner();
		oi.show();
	}
}
*/
//*************************************
//局部内部类
/*
	A:可以直接访问外部类的成员
	B:在局部位置，可以创建内部类对象，通过调用内部类方法
	来使用局部类功能
*/
/*class Outer
{
	private int num=10;
	
	public void method()    //局部方法会随调用结束而结束，变量也会被销毁
	{
		//private int num2=20;
		
			局部变量随着方法的调用而调用，随着调用完毕而消失
			而新建的对象在对内存中不会立即消失，所以我们要加final修饰
			被final修饰的变量相当于常量，不会立即消失
		
		final int num2=20;
		class Inner
		{
			public void show()
			{
				System.out.println(num);   //可以直接访问外部类成员
				System.out.println(num2);  //在这里相当传入了常量20
			}
		}
		Inner i=new Inner();    //可以在局部位置创建对象
		i.show();
	}
}

class InnerClassTest
{
	public static void main(String[] args)
	{
		Outer o=new Outer();
		o.method();
	}
}
*/
//匿名类的前提是存在一个类或者接口，可以是具体类或者
//抽象类，本质是继承了该类或者实现了该接口的子类匿名类对象
/*interface Inter
{
	public abstract void show();
	public abstract void show2();
}
class Outer
{
	public void method()
	{
		new Inter()
		{
			public void show()
			{
				System.out.println("show");
			}
		};  //注意，这里需要加逗号,而且只是创建了对象而已
		new Inter()
		{
			public void show()
			{
				System.out.println("show");
			}

			public void show2() {
				System.out.println("show2");
			}
		}.show();   //在点后加上对象名后才能真正调用对象的函数
		new Inter()
		{
			public void show()
			{
				System.out.println("show");
			}

			public void show2() {
				System.out.println("show2");
			}
		}.show2();   
		//调用两次函数需要进行两次，效率低
		Inter i=new Inter()  //因为生成的是接口的子类，所以
		//可以用接口来定义
		{
			public void show()
			{
				System.out.println("show");
			}
			public void  show2()
			{
				System.out.println("show2");
			}
		};
		i.show();
		i.show2();
	}
}
class InnerClassDemo
{
	public static void main(String[] args) {
		Outer o=new Outer();
		o.method();
	}
}*/

/*
	匿名类在开发中的应用
*/

/*interface Person
{
	public abstract void study();
}

class PersonDemo
{
	//这里需要的不是接口，而是该接口的实现类对象
	public void method(Person p)
	{
		p.study();
	}
}

//实现类
class Student implements Person
{
	public void study()
	{
		System.out.println("好好学习，天天向上");
	}
}

class InnerClassTest
{
	public static void main(String[] args) {
		PersonDemo pd=new PersonDemo();
		Person p=new Student();
		pd.method(p);
		System.out.println("------------------");
		pd.method(new Person()
		{
			//可以运用匿名类的方法实现接口方法
			public void study()
			{
				System.out.println("好好学习，天天向上");
			}
		});
	}

}*/
//按照要求，补全代码，要求在控制台输出"Hello World"
/*
interface Inter 
{
	void show();
	//public abstract 
}

class Outer
{
	//补全代码
}
class OuterDemo
{
	public static void main(String[] args) {
		Outer.method().show();
		/*
		 * Outer.method()可以看出method应该是Outer
		 * 中的一个静态方法
		 * Outer.method().show()可以看出method
		 * 返回值是一个对象，有由于接口Inter中有
		 * show方法，所以method方法返回类型是一个接口
		 */
/*	}
}
*/
interface Inter
{
	void show();
}
class Outer
{
	public static Inter method()
	{
		return new Inter()
		{
			public void show()
			{
				System.out.println("Hello World");
			}
		};
	}
}
class OuterDemo
{
	public static void main(String[] args) {
		Outer.method().show();
	}
}













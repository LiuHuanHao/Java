import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class haha {

	public static void main(String[] args) {

		// Vector是线程安全的时候才考虑使用的
		/*
		 * List<String> list1=new new ArrayList<String>();//线程不安全 
		 * List<String> list2=Collections.synchronizedList(new ArrayList<String>());// 线程安全
			// 创建资源对象
		/*
		 * SellTicket st=new SellTicket(); //创建三个窗口 
		 * Thread t1=new Thread(st,"窗口1"); 
		 * Thread t2=new Thread(st,"窗口2"); 
		 * Thread t3=new Thread(st,"窗口3"); 
		 * //启动线程
		 * t1.start(); 
		 * t2.start();
		 * t3.start();
		 */
		/*
		 * 为了清晰的表达加锁和释放锁，JDK5提供了一个新的锁对象Lock Lock: 
		 * void lock():获取锁 
		 * void unlock():释放锁
		 * ReentrantLock是lock的实现类 
		 * 同步的弊端 
		 * A:效率低 
		 * B:容易产生死锁
		 */
		/*
		 * DieLock dl1=new DieLock(true); 
		 * DieLock dl2=new DieLock(false);
		 * dl1.start(); 
		 * dl2.start();
		 */
		// ****************
		/*
		 * 如何实现不同线程的数据共享呢 在外界把数据创建出来，通过构造方法传递给其他的类
		 */
		// 创建资源
		Student s = new Student();
		SetThread st = new SetThread(s);
		GetThread gt = new GetThread(s);
		Thread t1 = new Thread(st);
		Thread t2 = new Thread(gt);
		t1.start(); // 当set线程比较慢时就会打印出null
		t2.start(); // 线程一点点时间片的执行权就足够运行很多次
		/*
		 * 不同线程的同步 加锁: 不同种类的线程都要加锁，而且必须是同一把
		 * 存在如下问题:
		 * 如果消费者先抢到执行权就去消费，但是还没被赋值
		 * 生产者生产了数据还继续拥有执行权会造成重复
		 * 于是Java就提供了等待唤醒机制
		 * Object类中提供了三个方法:
		 * wait():等待
		 * notify():唤醒单个进程
		 * notifyAll():唤醒所有的进程
		 * 这些方法必须通过对锁对象的调用，而我们知道锁对象是任意锁对象
		 * 所以这些方法必须定义在Object类中
		 */
	}
}

class Student {
	String name;
	int age;
	boolean flag=false;
}

class SetThread implements Runnable {
	private Student s;
	private int x = 0;

	public SetThread(Student s) {   //传入外部的数据，实现共享
		this.s = s;
	}

	@Override
	public void run() {
		while (true) {
			synchronized (s) {
				//判断有没有
				if(s.flag)  //如果有数据时线程等待
				{
					try {
						s.wait();
					} catch (InterruptedException e) {
						//I love WY
						e.printStackTrace();
					}
				}
				if (x % 2 == 0) {
					// Student s=new Student(); //这里是对象自己创建的，没有实现与其他线程的共享
					s.name = "林青霞";
					s.age = 27;
				} else {
					s.name = "刘焕濠"; // 刚走到这里就被别人抢到了执行权，此时age并一定为30
					s.age = 30;
				}
				x++;
				//修改标记
				s.flag=true;    //标志设为true表明此时已经存入了数据
				//唤醒线程
				s.notify();
			}
		}
	}
}

class GetThread implements Runnable {
	private Student s;

	public GetThread(Student s) {
		this.s = s;
	}

	@Override
	public void run() {
		while (true) {
			synchronized(s)
			{
				if(!s.flag)  //当没有数据时等待线程，知道被唤醒
				{
					try {
						s.wait();
					} catch (InterruptedException e) {
						//I love WY
						e.printStackTrace();
					}
				}
			// Student s=new Student();
			System.out.println(s.name + "-----" + s.age);
			//修改标记
			s.flag=false;
			//唤醒线程
			s.notify();
			}
		}
	}
}

class MyLock {
	// 创建两把静态锁
	public static final Object objA = new Object();
	public static final Object objB = new Object();
}

class SellTicket implements Runnable {
	private int tickets = 100;
	private Lock lock = new ReentrantLock(); //多态     Lock为虚拟类

	@Override
	public void run() {
		while (true) {
			try {
				// 加锁
				lock.lock();
				if (tickets > 0) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					System.out.println(Thread.currentThread().getName()
							+ "正在出售" + (tickets--) + "张票");
				}
			}
			// 释放锁
			finally {
				lock.unlock(); // 假如上面的代码运行不下来可以用
				// try finally释放lock.unlock()
			}
		}
	}
}

class DieLock extends Thread {
	private boolean flag;

	public DieLock(boolean flag) // 传入boolean的构造函数，作为调用代码段的标志
	{
		this.flag = flag;
	}

	@Override
	public void run() {
		if (flag) {
			synchronized (MyLock.objA) // 静态可以调用的锁
			{
				System.out.println("if objA");
				synchronized (MyLock.objB) // 当两个锁都被使用的时候，会出现相互锁定而无法进行下一步
				{
					System.out.println("if objB");
				}
			}
		} else {
			synchronized (MyLock.objB) {
				System.out.println("else objB");
				synchronized (MyLock.objA) {
					System.out.println("else objA");
				}
			}
		}
	}
}

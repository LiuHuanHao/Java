package haha;
/*
 * protected void finalize();用于垃圾回收
 * protected Objected clone();
 * 创建并返回此对象的一个副本
 * Cloneable此类实现Cloneable接口，这是标记接口
 * 告诉我们可以实现这个对象的复制
 */
public class StudentTest {
	public static void main(String[] args) throws CloneNotSupportedException {
		Student s=new Student();
		s.setName("林青霞");
		s.setAge(27);
		//虽然protected clone()在Object
		//中，但是由于包含在其他类中引用，所以需要重写函数
		Object obj=s.clone();
		Student s2=(Student)obj;
		System.out.println(s.getName()+"----"+s.getAge());
		System.out.println("------------------");
		System.out.println(s2.getName()+"----"+s2.getAge());
		//以前的做法
		Student s3=s; //相当于两个同时指向了相同的地址
		System.out.println(s3.getName()+"----"+s3.getAge());
		//其实和克隆是有区别
		//当等于号两边的分别一边改变时，两边的数据都会随之改变
		//而克隆的数据不会受到影响
		System.out.println("--------");
		s3.setName("刘焕濠");
		s3.setAge(18);
		System.out.println(s.getName()+"---"+s.getAge());
		System.out.println(s2.getName()+"--"+s2.getAge());
		System.out.println(s3.getName()+"---"+s3.getAge());
	}

}

class Student implements Cloneable
{
	private String name;
	private int age;
	public Student() {
		super();
		
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	protected Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}
	
}
	
	



















